// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/go-file/proto/file.proto

/*
Package file is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/go-file/proto/file.proto

It has these top-level messages:
	OpenRequest
	OpenResponse
	CloseRequest
	CloseResponse
	StatRequest
	StatResponse
	ReadRequest
	ReadResponse
	GetRequest
	GetResponse
*/
package file

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for File service

type FileService interface {
	Open(ctx context.Context, in *OpenRequest, opts ...client.CallOption) (*OpenResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...client.CallOption) (*StatResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...client.CallOption) (*CloseResponse, error)
}

type fileService struct {
	c           client.Client
	serviceName string
}

func FileServiceClient(serviceName string, c client.Client) FileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "file"
	}
	return &fileService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *fileService) Open(ctx context.Context, in *OpenRequest, opts ...client.CallOption) (*OpenResponse, error) {
	req := c.c.NewRequest(c.serviceName, "File.Open", in)
	out := new(OpenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) Stat(ctx context.Context, in *StatRequest, opts ...client.CallOption) (*StatResponse, error) {
	req := c.c.NewRequest(c.serviceName, "File.Stat", in)
	out := new(StatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "File.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) Close(ctx context.Context, in *CloseRequest, opts ...client.CallOption) (*CloseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "File.Close", in)
	out := new(CloseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for File service

type FileHandler interface {
	Open(context.Context, *OpenRequest, *OpenResponse) error
	Stat(context.Context, *StatRequest, *StatResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Close(context.Context, *CloseRequest, *CloseResponse) error
}

func RegisterFileHandler(s server.Server, hdlr FileHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&File{hdlr}, opts...))
}

type File struct {
	FileHandler
}

func (h *File) Open(ctx context.Context, in *OpenRequest, out *OpenResponse) error {
	return h.FileHandler.Open(ctx, in, out)
}

func (h *File) Stat(ctx context.Context, in *StatRequest, out *StatResponse) error {
	return h.FileHandler.Stat(ctx, in, out)
}

func (h *File) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.FileHandler.Read(ctx, in, out)
}

func (h *File) Close(ctx context.Context, in *CloseRequest, out *CloseResponse) error {
	return h.FileHandler.Close(ctx, in, out)
}

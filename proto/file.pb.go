// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/go-file/proto/file.proto

/*
Package file is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/go-file/proto/file.proto

It has these top-level messages:
	OpenRequest
	OpenResponse
	CloseRequest
	CloseResponse
	StatRequest
	StatResponse
	ReadRequest
	ReadResponse
	GetRequest
	GetResponse
*/
package file

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OpenRequest struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *OpenRequest) Reset()                    { *m = OpenRequest{} }
func (m *OpenRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenRequest) ProtoMessage()               {}
func (*OpenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpenRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type OpenResponse struct {
	Id     int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Result bool  `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *OpenResponse) Reset()                    { *m = OpenResponse{} }
func (m *OpenResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenResponse) ProtoMessage()               {}
func (*OpenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpenResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OpenResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type CloseRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CloseRequest) Reset()                    { *m = CloseRequest{} }
func (m *CloseRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()               {}
func (*CloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CloseRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CloseResponse struct {
}

func (m *CloseResponse) Reset()                    { *m = CloseResponse{} }
func (m *CloseResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseResponse) ProtoMessage()               {}
func (*CloseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StatRequest struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type StatResponse struct {
	Type         string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Size         int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	LastModified int64  `protobuf:"varint,3,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
}

func (m *StatResponse) Reset()                    { *m = StatResponse{} }
func (m *StatResponse) String() string            { return proto.CompactTextString(m) }
func (*StatResponse) ProtoMessage()               {}
func (*StatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StatResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StatResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *StatResponse) GetLastModified() int64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

type ReadRequest struct {
	Id     int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReadRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ReadResponse struct {
	Size int64  `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Eof  bool   `protobuf:"varint,3,opt,name=eof" json:"eof,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReadResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ReadResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadResponse) GetEof() bool {
	if m != nil {
		return m.Eof
	}
	return false
}

type GetRequest struct {
	Id      int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BlockId int64 `protobuf:"varint,2,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetRequest) GetBlockId() int64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

type GetResponse struct {
	BlockId int64  `protobuf:"varint,1,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	Size    int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetResponse) GetBlockId() int64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

func (m *GetResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GetResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*OpenRequest)(nil), "OpenRequest")
	proto.RegisterType((*OpenResponse)(nil), "OpenResponse")
	proto.RegisterType((*CloseRequest)(nil), "CloseRequest")
	proto.RegisterType((*CloseResponse)(nil), "CloseResponse")
	proto.RegisterType((*StatRequest)(nil), "StatRequest")
	proto.RegisterType((*StatResponse)(nil), "StatResponse")
	proto.RegisterType((*ReadRequest)(nil), "ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "ReadResponse")
	proto.RegisterType((*GetRequest)(nil), "GetRequest")
	proto.RegisterType((*GetResponse)(nil), "GetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for File service

type FileClient interface {
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
}

type fileClient struct {
	cc *grpc.ClientConn
}

func NewFileClient(cc *grpc.ClientConn) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := grpc.Invoke(ctx, "/File/Open", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := grpc.Invoke(ctx, "/File/Stat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/File/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := grpc.Invoke(ctx, "/File/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for File service

type FileServer interface {
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
}

func RegisterFileServer(s *grpc.Server, srv FileServer) {
	s.RegisterService(&_File_serviceDesc, srv)
}

func _File_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/File/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/File/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/File/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/File/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _File_serviceDesc = grpc.ServiceDesc{
	ServiceName: "File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _File_Open_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _File_Stat_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _File_Read_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _File_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/go-file/proto/file.proto",
}

func init() { proto.RegisterFile("github.com/micro/go-file/proto/file.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6f, 0xda, 0x30,
	0x14, 0xc7, 0x09, 0xc9, 0x58, 0xf6, 0x70, 0xd8, 0xe4, 0xc3, 0xc4, 0x72, 0x98, 0x90, 0xa7, 0x49,
	0x70, 0x98, 0x23, 0x6d, 0xd2, 0xf6, 0x01, 0x26, 0x6d, 0xe3, 0x30, 0xb5, 0x72, 0x8f, 0x3d, 0xa0,
	0x80, 0x1d, 0x6a, 0x35, 0xc1, 0x29, 0x36, 0x87, 0xf6, 0xfb, 0xf4, 0x7b, 0x56, 0x76, 0x0c, 0x98,
	0xaa, 0x48, 0xbd, 0xfd, 0x9f, 0xfd, 0xcf, 0xf3, 0x2f, 0xef, 0xfd, 0x61, 0xb6, 0x96, 0xe6, 0x66,
	0xb7, 0xa4, 0x2b, 0xd5, 0x14, 0x8d, 0x5c, 0x6d, 0x55, 0xb1, 0x56, 0xdf, 0x2a, 0x59, 0x8b, 0xa2,
	0xdd, 0x2a, 0xa3, 0x0a, 0x2b, 0xa9, 0x93, 0x64, 0x06, 0xc3, 0x8b, 0x56, 0x6c, 0x98, 0xb8, 0xdb,
	0x09, 0x6d, 0x70, 0x0e, 0xa9, 0xbd, 0xdc, 0x94, 0x8d, 0x18, 0x47, 0x93, 0x68, 0xfa, 0x8e, 0x1d,
	0x6a, 0xf2, 0x13, 0x50, 0x67, 0xd5, 0xad, 0xda, 0x68, 0x81, 0x47, 0xd0, 0x97, 0xdc, 0xb9, 0x62,
	0xd6, 0x97, 0x1c, 0x7f, 0x84, 0xc1, 0x56, 0xe8, 0x5d, 0x6d, 0xc6, 0xfd, 0x49, 0x34, 0x4d, 0x99,
	0xaf, 0xc8, 0x67, 0x40, 0xbf, 0x6b, 0xa5, 0xc5, 0xfe, 0x8d, 0x67, 0xdf, 0x91, 0xf7, 0x90, 0xf9,
	0xfb, 0xae, 0xb1, 0x65, 0xba, 0x32, 0xa5, 0x79, 0x0d, 0xd3, 0x35, 0xa0, 0xce, 0xea, 0x99, 0x30,
	0x24, 0xe6, 0xbe, 0xdd, 0xfb, 0x9c, 0xb6, 0x67, 0x5a, 0x3e, 0x08, 0x47, 0x15, 0x33, 0xa7, 0xf1,
	0x17, 0xc8, 0xea, 0x52, 0x9b, 0x45, 0xa3, 0xb8, 0xac, 0xa4, 0xe0, 0xe3, 0xd8, 0x5d, 0x22, 0x7b,
	0xf8, 0xdf, 0x9f, 0x91, 0x39, 0x0c, 0x99, 0x28, 0xf9, 0x19, 0x6e, 0xfb, 0xbf, 0xaa, 0xaa, 0xb4,
	0x30, 0xbe, 0xb3, 0xaf, 0x0e, 0xef, 0xc5, 0xc7, 0xf7, 0xc8, 0x3f, 0x40, 0x5d, 0xab, 0x23, 0xa7,
	0xf3, 0x44, 0x01, 0x13, 0x86, 0x84, 0x97, 0xa6, 0x74, 0xdd, 0x10, 0x73, 0x1a, 0x7f, 0x80, 0x58,
	0xa8, 0xca, 0xb5, 0x4a, 0x99, 0x95, 0xe4, 0x17, 0xc0, 0x5f, 0x61, 0xce, 0x31, 0x7d, 0x82, 0x74,
	0x59, 0xab, 0xd5, 0xed, 0x42, 0x72, 0x4f, 0xf5, 0xd6, 0xd5, 0x73, 0x4e, 0x2e, 0x61, 0xe8, 0x3e,
	0xf4, 0x04, 0xa1, 0x33, 0x3a, 0x71, 0xbe, 0x38, 0xb0, 0x3d, 0x5c, 0x7c, 0x84, 0xfb, 0xfe, 0x18,
	0x41, 0xf2, 0x47, 0xd6, 0x02, 0x7f, 0x85, 0xc4, 0x26, 0x03, 0x23, 0x1a, 0x64, 0x29, 0xcf, 0x68,
	0x18, 0x17, 0xd2, 0xb3, 0x36, 0xbb, 0x2c, 0x8c, 0x68, 0xb0, 0xde, 0x3c, 0xa3, 0xe1, 0x06, 0x3b,
	0x9b, 0x9d, 0x15, 0x46, 0x34, 0x98, 0x7e, 0x9e, 0xd1, 0x70, 0x80, 0xa4, 0x87, 0xa7, 0xf0, 0xc6,
	0xc5, 0x06, 0x67, 0x34, 0x8c, 0x57, 0x3e, 0xa2, 0xa7, 0x69, 0xea, 0x2d, 0x07, 0x2e, 0xea, 0x3f,
	0x9e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x31, 0x3a, 0xe5, 0xa2, 0x17, 0x03, 0x00, 0x00,
}
